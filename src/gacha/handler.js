// AIÁîüÊàêÁâà„ÅÆ„Ç¨„ÉÅ„É£„É™„ÇØ„Ç®„Çπ„Éà„Éè„É≥„Éâ„É©
// „Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅØ„ÄÅ.gacha-request.json„ÇíÁõ£Ë¶ñ„Åó„Å¶AI„ÉÑ„Éº„É´„Çí‰ΩøÁî®„Åó„Å¶message.json„ÅÆÂÜÖÂÆπ„ÇíÁîüÊàê„Åó„Åæ„Åô

const fs = require('fs');
const path = require('path');
const generatorFactory = require('./lib/generator-factory');

// „Ç´„ÉÜ„Ç¥„É™ÂÆöÁæ©Ôºàgacha.js„Å®ÂêåÊúüÔºâ
const categories = [
  { id: 'tech', name: 'TechÁ≥ª', weight: 20 },
  { id: 'gadget', name: 'GadgetÁ≥ª', weight: 20 },
  { id: 'food', name: 'FoodÁ≥ª', weight: 20 },
  { id: 'entertainment', name: 'EntertainmentÁ≥ª', weight: 20 },
  { id: 'life', name: 'LifeÁ≥ª', weight: 20 }
];

// „É¨„Ç¢„É™„ÉÜ„Ç£ÂÆöÁæ©Ôºàgacha.js„Å®ÂêåÊúüÔºâ
const rarities = [
  { id: 'N', name: 'Normal', weight: 60, stars: '‚òÜ' },
  { id: 'R', name: 'Rare', weight: 25, stars: '‚≠êÔ∏è‚≠êÔ∏è' },
  { id: 'SR', name: 'Super Rare', weight: 10, stars: '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è' },
  { id: 'UR', name: 'Ultra Rare', weight: 4, stars: '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è' },
  { id: 'LR', name: 'Legend Rare', weight: 1, stars: '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è' }
];

// „É™„ÇØ„Ç®„Çπ„Éà„ÇíÂá¶ÁêÜ„Åó„Å¶„É¨„Çπ„Éù„É≥„Çπ„ÇíÁîüÊàê
async function handleGachaRequest() {
  const requestPath = path.join(__dirname, '.gacha-request.json');
  const responsePath = path.join(__dirname, '.gacha-response.json');
  
  // „É™„ÇØ„Ç®„Çπ„Éà„Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
  if (!fs.existsSync(requestPath)) {
    return;
  }
  
  try {
    // „É™„ÇØ„Ç®„Çπ„Éà„ÇíË™≠„ÅøËæº„Åø
    const request = JSON.parse(fs.readFileSync(requestPath, 'utf8'));
    
    // „Ç´„ÉÜ„Ç¥„É™„Å®„É¨„Ç¢„É™„ÉÜ„Ç£„ÇíÂèñÂæó
    const category = categories.find(c => c.id === request.category);
    const rarity = rarities.find(r => r.id === request.rarity);
    
    if (!category || !rarity) {
      throw new Error(`Invalid category or rarity: ${request.category}, ${request.rarity}`);
    }
    
    console.log(`üé≤ Generating ${category.name} ${rarity.name} content...`);
    
    // „Ç∏„Çß„Éç„É¨„Éº„Çø„Éº„ÇíÂèñÂæó
    const generator = generatorFactory.create();
    
    // „Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÁîüÊàê
    const generatedData = await generator.generate(category, rarity);
    
    // „É¨„Çπ„Éù„É≥„Çπ„ÇíÊõ∏„ÅçËæº„Åø
    fs.writeFileSync(responsePath, JSON.stringify(generatedData, null, 2));
    
    // „É™„ÇØ„Ç®„Çπ„Éà„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§
    fs.unlinkSync(requestPath);
    
    console.log(`‚úÖ Generated ${category.name} ${rarity.name} gacha result`);
    
  } catch (error) {
    console.error('‚ùå Error handling gacha request:', error.message);
    
  }
}

// „Ç∏„Çß„Éç„É¨„Éº„Çø„Éº„ÅÆ„ÉÜ„Çπ„ÉàÊ©üËÉΩ
async function testGenerators() {
  console.log('üß™ Testing available generators...\n');
  
  const availableGenerators = generatorFactory.getAvailableGenerators();
  console.log('Available generators:', availableGenerators.join(', '));
  
  const config = generatorFactory.getConfig();
  console.log('Current generator:', config.generator);
  console.log('\nConfiguration:');
  console.log(JSON.stringify(config, null, 2));
  
  // ÂêÑ„Ç∏„Çß„Éç„É¨„Éº„Çø„Éº„Çí„ÉÜ„Çπ„Éà
  for (const type of availableGenerators) {
    console.log(`\nüìù Testing ${type} generator...`);
    const success = await generatorFactory.testGenerator(type);
    console.log(`${type}: ${success ? '‚úÖ OK' : '‚ùå Failed'}`);
  }
}

// „Éï„Ç°„Ç§„É´Áõ£Ë¶ñ„É¢„Éº„Éâ
function watchMode() {
  console.log('üëÄ Watching for gacha requests...');
  console.log('Current generator:', generatorFactory.getConfig().generator);
  console.log('Press Ctrl+C to stop\n');

  const requestPath = path.join(__dirname, '.gacha-request.json');

  // ÂàùÂõû„ÉÅ„Çß„ÉÉ„ÇØ
  handleGachaRequest();

  // fs.watch„Åß„Éï„Ç°„Ç§„É´„ÅÆÂ§âÊõ¥„ÇíÁõ£Ë¶ñ
  fs.watch(__dirname, (eventType, filename) => {
    if (filename === '.gacha-request.json' && (eventType === 'change' || eventType === 'rename')) {
      handleGachaRequest();
    }
  });
}

// ÂçòÁô∫ÂÆüË°å„É¢„Éº„Éâ
async function singleRun() {
  await handleGachaRequest();
}

// „É°„Ç§„É≥Âá¶ÁêÜ
const args = process.argv.slice(2);

if (args.includes('--test')) {
  // „Ç∏„Çß„Éç„É¨„Éº„Çø„Éº„ÅÆ„ÉÜ„Çπ„Éà
  testGenerators().catch(console.error);
} else if (args.includes('--watch')) {
  // Áõ£Ë¶ñ„É¢„Éº„Éâ
  watchMode();
} else if (args.includes('--config')) {
  // Ë®≠ÂÆö„ÅÆË°®Á§∫/Â§âÊõ¥
  if (args.length > args.indexOf('--config') + 1) {
    const generatorType = args[args.indexOf('--config') + 1];
    generatorFactory.updateConfig({ generator: generatorType });
    console.log(`‚úÖ Generator changed to: ${generatorType}`);
  } else {
    const config = generatorFactory.getConfig();
    console.log('Current configuration:');
    console.log(JSON.stringify(config, null, 2));
  }
} else {
  // ÂçòÁô∫ÂÆüË°å
  singleRun().catch(console.error);
}